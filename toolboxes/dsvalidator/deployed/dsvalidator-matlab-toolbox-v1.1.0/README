#################################################
#                                               #
# DSValidator (Digital-System Validator) v1.1.0	#
#			                        #
#################################################
#			                      	#
# This package contains:                   	#
#                                               #
#  1) DSValidator v1.1.0	                #
#                                               #
#################################################

DSValidator is an automated validation tool based on MATLAB Toolbox, with the goal to reproduce counterexamples that refute specific properties related to digital systems. DSValidator exploit counterexamples generated by the Digital-System Verifier (DSVerifier), which is a model checking tool based on satisfiability modulo theories for digital systems.  DSValidator reproduces the execution of a digital system represented by a transfer function to validate counterexamples provided by the DSVerifier tool and also to manipulate those counterexamples within other MATLAB toolboxes.

Supported properties:

@ For Digital-Systems:
  * Overflow
  * Limit Cycle
  * Stability
  * Minimum Phase

http://www.dsverifier.org/

-----------------------------------------------------------------
################## INSTALLATION AND USAGE #######################
-----------------------------------------------------------------

----------------
@ Installation
---------------- 

In order to install DSValidator, the user should download the DSValidator installation file from the DSVerifier web page.
After that, the following steps should be executed:

1. Open MATLAB;
2. Execute the file with the “$.mltbx$” extension (or double-click on it); a pop-up screen to install DSvalidator will be shown.
3. Click on the install button.

--------------------
@ Usage
--------------------

##### Invoke the function ‘validation':

>> validation(path, property, ovmode, rmode, filename);

##### The path is the directory with all counterexamples and property is defined as:

‘m': for Minimum Phase Validation;
‘s': for Stability Validation;
‘o': for Overflow Validation;
‘lc': for Limit Cycle Validation.

##### The vmode is the overflow mode. The values could be:

‘saturate’ for saturate overflow
‘wrap’ for wrap around overflow

##### The rmode is the rounding mode. The values could be:

’round’ to use round as rounded mode
‘floor’ to use floor as rounded mode
The filename: the name of .MAT file generated as result from validation. By default, the value is "digital_system"


##### 1) Generate manually a .c file with system specification. Consider an example of a digital system description in the following ANSI-C file:

#include <dsverifier.h>

digital_system ds = { 
	.b = { 2002.0, -4000.0, 1998.0 },
	.b_size = 3,
	.a = { 1.0, 0.0, -1.0 },
	.a_size = 3,	
	.sample_time = 0.001
};

implementation impl = { 
	.int_bits = 13,
	.frac_bits = 3,
	.max = 1.0,
	.min = -1.0
};

##### 2) Execute DSVerifier. The DSVerifier verification must be invoked in command line using the following parameters:

./dsverifier input.c --realization DFI --property LIMIT_CYCLE --x-size 10 --bmc CBMC --show-ce-data > dsv_limit_system_02.out
A counterexample will be printed as follow .out file:

VERIFICATION FAILED

Counterexample Data:
  Property = LIMIT_CYCLE
  Numerator  = { 2002  -4000 1998 }
  Denominator  = { 1 0 -1 }
  X Size = 10
  Sample Time = 0.001
  Implementation = <13,3>
  Numerator (fixed-point) = {  2002  -4000 1998  }
  Denominator (fixed-point) = { 1 0 -1 }
  Realization = DFI
  Dynamic Range = {-1,1}
  Initial States = { -0.875  0.0 -1.0 }
  Inputs = { 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 }
  Outputs = { 0  -1  0  -1  0  -1  0  -1  0  -1  }

##### 3) Execute the automatic validation. In MATLAB Workspace, considering that the toolbox is already installed, you can invoke in command line the following function:

 validation('/home/user/counterexample','lc','wrap','round','ce_limit'); 

* The path should be according your directory with .out files.

##### The result of automatic validation for this example will be a report as follow:

Counterexamples Validation Report...

CE 1 time: 0.11177 status: reproducible

General Report:

Total Counterexamples Reproducible: 1
Total Counterexamples Irreproducible: 0
Total Counterexamples: 1
Total Time Execution: 0.11177
And a .MAT file named ‘ce_limit’ is generated in your MATLAB workspace.
